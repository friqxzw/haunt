import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Sample dataset
data = {
    'Game': ['The Witcher 3', 'Cyberpunk 2077', 'Minecraft', 'Among Us', 'Valorant'],
    'Genre': ['RPG', 'RPG', 'Sandbox', 'Party', 'FPS'],
    'Platform': ['PC, PS4', 'PC, PS4', 'PC, Console', 'PC', 'PC'],
    'Description': [
        'An open-world RPG with deep storytelling.',
        'A futuristic RPG set in Night City.',
        'A sandbox game with endless possibilities.',
        'A social party game with imposters.',
        'A tactical FPS with agents and abilities.'
    ]
}

# Create DataFrame
df = pd.DataFrame(data)

# Combine relevant features into a single string for each game
df['Features'] = df['Genre'] + " " + df['Platform'] + " " + df['Description']

# Convert text to feature vectors using TF-IDF
vectorizer = TfidfVectorizer()
feature_matrix = vectorizer.fit_transform(df['Features'])

# Compute cosine similarity between games
cosine_sim = cosine_similarity(feature_matrix, feature_matrix)

# Function to recommend games
def recommend_games(game_title, num_recommendations=3):
    if game_title not in df['Game'].values:
        print(f"Game '{game_title}' not found in the dataset!")
        return []
    
    # Find the index of the given game
    game_index = df[df['Game'] == game_title].index[0]
    
    # Get similarity scores for all games
    similarity_scores = list(enumerate(cosine_sim[game_index]))
    
    # Sort games by similarity score in descending order
    sorted_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    
    # Get the indices of the most similar games
    recommended_indices = [idx for idx, score in sorted_scores[1:num_recommendations+1]]
    
    # Return the names of the recommended games
    recommended_games = df['Game'].iloc[recommended_indices].tolist()
    return recommended_games

# Example usage
game_to_search = "The Witcher 3"
print(f"Recommendations for '{game_to_search}':")
recommendations = recommend_games(game_to_search, num_recommendations=3)
for idx, rec in enumerate(recommendations, 1):
    print(f"{idx}. {rec}")
